#!/usr/bin/env node

import args from 'args'
import micro from 'micro-core'
import { resolve } from 'path'

// babel
import preset2015 from 'babel-preset-es2015'
import transformAsync from 'babel-plugin-transform-async-to-generator'
import transformRuntime from 'babel-plugin-transform-runtime'
import alias from 'babel-plugin-module-alias'

args
  .option(['p', 'port'], 'Port to listen on', 3000, parseInt)
  .option(['H', 'host'], 'Host to listen on', '0.0.0.0')
  .option(['n', 'no-babel'], 'Skip Babel transformation')

const flags = args.parse(process.argv)
let file = args.sub.pop()

if (!file) {
  try {
    let packageJson = require(resolve(process.cwd(), 'package.json'))
    file = packageJson.main
  } catch (e) {
    if ('MODULE_NOT_FOUND' !== e.code) {
      console.error(`> \u001b[31mError!\u001b[39m ${e.message}`)
      process.exit(1)
    }
  }
}

if (!file) {
  console.error(`\n> \u001b[31mError!\u001b[39m Please supply a file.`)
  args.showHelp()
  process.exit(1)
}

if ('/' !== file[0]) {
  file = resolve(process.cwd(), file)
}

if (!flags.noBabel) {
  // FIXME: is there a better way to point the `babel-runtime`
  // to the runtime contained in the micro installation?
  const path = require.resolve('babel-runtime/package')
  .replace(/[\\\/]package.json$/, '')

  require('babel-register')({
    presets: [preset2015],
    plugins: [
      transformAsync,
      transformRuntime,
      [alias, [
        { src: path, expose: 'babel-runtime' }
      ]]
    ]
  })
}

let mod

try {
  mod = require(file).default
} catch (e) {
  if ('MODULE_NOT_FOUND' === e.code) {
    console.error(`> \u001b[31mError!\u001b[39m "${file}" does not exist.`)
  } else {
    console.error(`> \u001b[31mError!\u001b[39m ${e.message}`)
  }
  process.exit(1)
}

if ('function' !== typeof mod) {
  console.error(`> \u001b[31mError!\u001b[39m "${file}" does not export a function.`)
  process.exit(1)
}

const port = flags.port || 3000
const host = flags.host || '0.0.0.0'

micro(mod).listen(port, host, (err) => {
  if (err) {
    console.error(err.stack)
    process.exit(1)
  }

  console.log(`> \u001b[96mReady!\u001b[39m Listening on ${host}:${port}.`)
})

// TODO: test listen error
// add success message
